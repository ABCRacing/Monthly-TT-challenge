import requests
import json
import os

# Load current challenge info
with open("data/current_challenge.json", "r") as f:
    challenge_info = json.load(f)

# Use the data_link from current_challenge.json
url = challenge_info.get("data_link")

# List of users to filter by
filter_users = [
    "ACEREES",
    "Neil Bywater",
    "reesyboy4",
    "Joe",
    "Steve Jackson"
]

# This maps the list of values to meaningful keys
keys = ['Position', 'Name', 'SteamID', 'LapTime', 'Sector1', 'Sector2', 'Sector3', 'Gap', 'Car', 'Date', 'Flags']

# Output path
output_dir = "data"
output_path = os.path.join(output_dir, "leaderboard_filtered.json")

# === Time formatting ===
def format_lap_time(ms):
    if not isinstance(ms, int):
        return ms
    minutes = ms // 60000
    seconds = (ms % 60000) // 1000
    milliseconds = ms % 1000
    return f"{minutes}:{seconds:02}.{milliseconds:03}"

def format_sector_time(ms):
    if not isinstance(ms, int):
        return ms
    seconds = ms // 1000
    milliseconds = ms % 1000
    return f"{seconds}.{milliseconds:03}"

def fetch_leaderboard():
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        filtered = []

        for entry in data:
            entry_dict = dict(zip(keys, entry))
            if entry_dict['Name'] in filter_users:
                # Format times
                entry_dict['LapTime'] = format_lap_time(entry_dict['LapTime'])
                entry_dict['Sector1'] = format_sector_time(entry_dict['Sector1'])
                entry_dict['Sector2'] = format_sector_time(entry_dict['Sector2'])
                entry_dict['Sector3'] = format_sector_time(entry_dict['Sector3'])
                filtered.append(entry_dict)

        with open(output_path, "w") as f:
            json.dump(filtered, f, indent=2)

        print(f"Filtered leaderboard saved to {output_path}")

    except Exception as e:
        print("Failed to fetch or process leaderboard:", e)

if __name__ == "__main__":
    fetch_leaderboard()

